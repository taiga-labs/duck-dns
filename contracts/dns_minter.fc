
#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op_codes.fc";
#include "imports/dns_utils.fc";
#include "imports/jetton_utils.fc";

const int DEPLOY_TON_AMOUNT = 500000000; ;; 0.5 TON
const int JETTON_TRANSFER_COMISSION = 50000000; ;; 0.05 TON

;; DNS resolver smart contract (implements NFT Collection interface)

;; storage scheme
;; storage#_ collection_content:^Cell
;;           nft_item_code:^Cell
;;           admin_address: MsgAddressInt
;;           duck_jetton_info:^Cell
;;           base_content_template:^Cell
;;           = Storage;

(cell, cell, slice, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return (
            ds~load_ref(), ;; content
            ds~load_ref(), ;; nft_item_code
            ds~load_msg_addr(), ;; admin_address
            ds~load_ref(), ;; duck_jetton_info
            ds~load_ref() ;; base_content_template
    );
}

() save_data(cell content, cell nft_item_code, slice admin_address, cell duck_jetton_info, cell base_content_template) impure inline {
    set_data(
        begin_cell()
            .store_ref(content)
            .store_ref(nft_item_code)
            .store_slice(admin_address)
            .store_ref(duck_jetton_info)
            .store_ref(base_content_template)
        .end_cell()
    );
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 256).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell()
            .store_uint(4, 3)
            .store_int(wc, 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

() deploy_nft_item(cell state_init, int ton_amount, slice nft_address, int send_mode) impure {
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(ton_amount)
            .store_uint(4 + 2, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init);
    send_raw_message(msg.end_cell(), send_mode);
}

() send_simple_jetton(slice to_address, int jettons_amount, int tons_amount, int forward_tons_amount, slice to_jetton_wallet_address, int query_id, cell payload, int send_mode) impure inline {
    builder message = 
        begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
            .store_slice(to_jetton_wallet_address)
            .store_coins(tons_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0xf8a7ea5, 32)
            .store_uint(query_id, 64)
            .store_coins(jettons_amount)
            .store_slice(to_address)    ;; to_owner_address
            .store_slice(zero_address())  ;; response_address
            .store_uint(0, 1)  ;; empty custom_payload
            .store_coins(forward_tons_amount) ;  ;; forward amount to new_owner_address
            
    if (~ cell_null?(payload)) {
        message = message.store_uint(1, 1);
        message = message.store_ref(payload);
    }
    else {
        message = message.store_uint(0, 1); ;; empty forward_payload
    }
    
    send_raw_message(message.end_cell(), send_mode);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; bounce back empty messages
        throw(0xffff);
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op_code = in_msg_body~load_uint(32);

    (cell content, cell nft_item_code, slice admin_address, cell duck_jetton_info, cell base_content_template) = load_data();


    if (op_code == 0x7362d09c) { ;; jetton transfer notification

        throw_unless(512, msg_value >= (JETTON_TRANSFER_COMISSION * 2) + DEPLOY_TON_AMOUNT);

        int query_id = in_msg_body~load_uint(64);
        int msg_jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        in_msg_body~skip_bits(1);

        ;; chek jetton
        slice sliced_duck_jetton_info = duck_jetton_info.begin_parse();
        slice duck_master_address = sliced_duck_jetton_info~load_msg_addr();
        cell duck_jetton_wallet_code = sliced_duck_jetton_info~load_ref();

        slice sender_duck_jetton_wallet = calculate_user_jetton_wallet_address(my_address(), duck_master_address, duck_jetton_wallet_code);

        throw_unless(302, equal_slices(sender_duck_jetton_wallet, sender_address));

        ;; jetton payload after that

        slice inner_payload = in_msg_body~load_ref().begin_parse();

        int op = inner_payload~load_uint(32);

        if (op == 0) { ;; deploy new nft
            int now_time = now();
            throw_unless(199, now_time > auction_start_time); ;; start of auction
            slice domain = read_domain_from_comment(inner_payload);
            int len = slice_bits(domain);
            throw_unless(200, len > 3 * 8); ;; minimum 4 characters
            throw_unless(201, len <= 126 * 8); ;; maxmimum 126 characters
            throw_unless(202, mod(len, 8) == 0);
            throw_unless(203, check_domain_string(domain));
            int min_price = get_min_price(len, now_time);
            throw_unless(204, msg_jetton_amount >= min_price);

            int item_index = slice_hash(domain);

            cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
            slice nft_address = calculate_nft_item_address(workchain(), state_init);

            slice dns_item_jetton_wallet_address = calculate_user_jetton_wallet_address(nft_address, duck_master_address, duck_jetton_wallet_code);

            slice sliced_base_content_template = base_content_template.begin_parse();

            slice description = sliced_base_content_template~load_ref().begin_parse();
            slice image_path = sliced_base_content_template~load_ref().begin_parse();

            slice full_domain_name = (
                begin_cell()
                    .store_slice(domain)
                    .store_ref(
                        begin_cell()
                            .store_slice(".duck")
                        .end_cell()
                    )
                .end_cell().begin_parse()
            );

            slice full_image_path = (
                begin_cell()
                    .store_slice(image_path)
                    .store_ref(
                        begin_cell()
                            .store_slice(domain)
                            .store_ref(
                                begin_cell()
                                    .store_slice(".jpg")
                                .end_cell()
                            )
                        .end_cell()
                    )
                .end_cell().begin_parse()
            );

            cell base_content = new_dict();
            base_content = base_content.udict_set_ref(256, string_hash("name"), begin_cell().store_uint(0, 8).store_slice(full_domain_name).end_cell());
            base_content = base_content.udict_set_ref(256, string_hash("description"), begin_cell().store_uint(0, 8).store_slice(description).end_cell());
            base_content = base_content.udict_set_ref(256, string_hash("image"), begin_cell().store_uint(0, 8).store_slice(full_image_path).end_cell());

            deploy_nft_item(state_init, DEPLOY_TON_AMOUNT, nft_address, 1);

            cell nft_init_payload = 
                begin_cell()
                    .store_slice(from_address)
                    .store_ref(begin_cell().store_slice(domain).end_cell())
                    .store_slice(dns_item_jetton_wallet_address)
                    .store_ref(
                        begin_cell()
                            .store_uint(0, 8) ;; onchain tag
                            .store_dict(base_content)
                        .end_cell()
                    )
                .end_cell();

            
            slice my_jetton_wallet_address = calculate_user_jetton_wallet_address(my_address(), duck_master_address, duck_jetton_wallet_code);

            send_simple_jetton(nft_address, msg_jetton_amount, JETTON_TRANSFER_COMISSION * 2, JETTON_TRANSFER_COMISSION, my_jetton_wallet_address, query_id, nft_init_payload, 1);

            return ();
        }
        return ();
    }

    if (op_code == 2) { ;; change admin address
        throw_unless(403, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(content, nft_item_code, new_admin_address, duck_jetton_info, base_content_template);
        return ();
    }

    if (op_code == 3) { ;; admin button
        throw_unless(403, equal_slices(admin_address, sender_address));
        slice msg = in_msg_body~load_ref().begin_parse();
        int mode = msg~load_uint(8);
        send_raw_message(msg~load_ref(), mode);
        return ();
    }

    if (op_code == 4) { ;; change base content template
        throw_unless(403, equal_slices(admin_address, sender_address));
        cell new_base_content_template = in_msg_body~load_ref();
        save_data(content, nft_item_code, admin_address, duck_jetton_info, new_base_content_template);
        return ();
    }

    if (op_code == op::fill_up) { ;; just fill-up balance
        return ();
    }

    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    (cell content, _, slice admin_address, _, _) = load_data();
    return (-1, content, admin_address);
}

slice get_nft_address_by_index(int index) method_id {
    (_, cell nft_item_code, _, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    return individual_nft_content;
}

;; duck_jetton_info scheme
;; duck_jetton_info#_ duck_minter_address:MsgAddressInt
;;           duck_jetton_wallet_code:^Cell
;;           = duck_jetton_info;

cell get_duck_jetton_info() method_id {
    (_, _, _, cell duck_jetton_info, _) = load_data();
    return duck_jetton_info;
}

(slice, slice, slice) get_base_content_template() method_id {
    (_, _, _, _, cell base_content_template) = load_data();
    slice sliced_base_content_template = base_content_template.begin_parse();

    slice description = sliced_base_content_template~load_ref().begin_parse();
    slice image_path = sliced_base_content_template~load_ref().begin_parse();

    return (
        ".duck", 
        description,
        image_path
    );
}

(int, cell) dnsresolve(slice subdomain, int category) method_id {
    throw_unless(70, mod(slice_bits(subdomain), 8) == 0);

    int starts_with_zero_byte = subdomain.preload_int(8) == 0;

    if (starts_with_zero_byte & (slice_bits(subdomain) == 8)) { ;; "." requested
        return (8, null());  ;; resolved but no dns-records
    }
    if (starts_with_zero_byte) {
        subdomain~load_uint(8);
    }

    int top_subdomain_bits = get_top_domain_bits(subdomain);
    slice top_subdomain = subdomain~load_bits(top_subdomain_bits);
    int item_index = slice_hash(top_subdomain);
    cell result = 
        begin_cell()
            .store_uint(dns_next_resolver_prefix, 16)
            .store_slice(get_nft_address_by_index(item_index))
        .end_cell();
        
    return (top_subdomain_bits + (starts_with_zero_byte ? 8 : 0), result);
}