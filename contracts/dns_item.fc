
#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op_codes.fc";
#include "imports/dns_utils.fc";

;; Domain smart contract (implement NFT item interface)

int deploy_ton_amount() asm "500000000 PUSHINT"; ;; 0.5 TON
int min_tons_for_storage() asm "500000000 PUSHINT"; ;; 0.5 TON TON
int jetton_transfer_comission() asm "50000000 PUSHINT"; ;; 0.05 TON

const auction_start_duration = 604800; ;; 1 week = 60 * 60 * 24 * 7; in testnet 5 min
const auction_end_duration = 3600; ;; 1 hour = 60 * 60; in testnet 1 min
const auction_prolongation = 3600; ;; 1 hour = 60 * 60; in testnet 1 min

;;  MsgAddressInt max_bid_address
;;  Coins max_bid_amount
;;  int auction_end_time
(slice, int, int) unpack_auction(cell auction) {
    if (cell_null?(auction)) {
        return (null(), 0, 0);
    } else {
        slice ds = auction.begin_parse();
        return (ds~load_msg_addr(), ds~load_coins(), ds~load_uint(64));
    }
}

cell pack_auction(slice max_bid_address, int max_bid_amount, int auction_end_time) {
    return begin_cell()
            .store_slice(max_bid_address)
            .store_coins(max_bid_amount)
            .store_uint(auction_end_time, 64)
            .end_cell();
}

;;
;;  Storage
;;
;;  uint256 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  cell content
;;  cell domain - e.g contains "alice" (without ending \0) for "alice.ton" domain
;;  cell auction - auction info
;;  int last_fill_up_time
;;  cell additional jetton content --> 
;;      slice duck_jetton_wallet_address
;;      int smc_jetton_balance

(int, int, slice, slice, cell, cell, cell, int, slice, int, cell) load_data() {
    slice contract_storage = get_data().begin_parse();
    var (index, collection_address) = (contract_storage~load_uint(256), contract_storage~load_msg_addr());
    if (contract_storage.slice_bits() > 0) {
        slice owner_address = contract_storage~load_msg_addr();
        cell content = contract_storage~load_ref();
        cell domain = contract_storage~load_ref();
        cell auction = contract_storage~load_dict();
        int last_fill_up_time = contract_storage~load_uint(64);

        slice additional_info = contract_storage~load_ref().begin_parse();

        slice duck_jetton_wallet_address = additional_info~load_msg_addr();
        int smc_jetton_balance = additional_info~load_coins();
        cell base_content = additional_info~load_ref();
        
        return (-1, index, collection_address, owner_address, content, domain, auction, last_fill_up_time, duck_jetton_wallet_address, smc_jetton_balance, base_content);
    } else {
        return (0, index, collection_address, null(), null(), null(), null(), 0, null(), 0, null()); ;; nft not initialized yet
    }
}

() store_data(int index, slice collection_address, slice owner_address, cell content, cell domain, cell auction, int last_fill_up_time, slice duck_jetton_wallet_address, int smc_jetton_balance, cell base_content) impure {
    set_data(
            begin_cell()
                .store_uint(index, 256)
                .store_slice(collection_address)
                .store_slice(owner_address)
                .store_ref(content)
                .store_ref(domain)
                .store_dict(auction)
                .store_uint(last_fill_up_time, 64)
                .store_ref(
                    begin_cell()
                        .store_slice(duck_jetton_wallet_address)
                        .store_coins(smc_jetton_balance)
                        .store_ref(base_content)
                    .end_cell()
                )
            .end_cell()
    );
}

() send_simple_message(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);
}

() send_simple_jetton(slice to_address, int jettons_amount, int tons_amount, int forward_tons_amount, slice to_jetton_wallet_address, int query_id, int send_mode) impure inline {
    builder message = 
        begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
            .store_slice(to_jetton_wallet_address)
            .store_coins(tons_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0xf8a7ea5, 32)
            .store_uint(query_id, 64)
            .store_coins(jettons_amount)
            .store_slice(to_address)    ;; to_owner_address
            .store_slice(zero_address())  ;; response_address
            .store_int(0, 1)  ;; empty custom_payload
            .store_coins(forward_tons_amount)   ;; forward amount to new_owner_address
            .store_int(0, 1); ;; empty forward_payload
    
    send_raw_message(message.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, int index, slice collection_address, slice owner_address, cell content, slice sender_address, int query_id, slice in_msg_body, int fwd_fees, cell domain, cell auction, slice duck_jetton_wallet_address, int smc_jetton_balance, cell base_content) impure inline {
    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
        rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
        rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

    if (forward_amount) {
        send_simple_message(new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1); ;; paying fees, revert on errors
    }
    if (need_response) {
        force_chain(response_destination);
        send_simple_message(response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
    }

    store_data(index, collection_address, new_owner_address, content, domain, auction, now(), duck_jetton_wallet_address, smc_jetton_balance, base_content);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore empty messages (ex: for deploy)
        return ();
    }

    int my_balance = pair_first(get_balance());
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs

    int op_code = in_msg_body~load_uint(32);

    if (op_code == 0x7362d09c) { ;; jetton transfer notification

        int query_id = in_msg_body~load_uint(64);
        int msg_jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        in_msg_body~skip_bits(1);

        ;; jetton payload after that

        slice inner_payload = in_msg_body~load_ref().begin_parse();
        
        (int init?, int index, slice collection_address, slice owner_address, cell content, cell domain, cell auction, int last_fill_up_time, slice duck_jetton_wallet_address, int smc_jetton_balance, cell base_content) = load_data();
        if (~ init?) {
            throw_unless(405, equal_slices(collection_address, from_address));
            throw_unless(426, msg_value >= jetton_transfer_comission()); ;; 0.05 TON
            slice from_user_address = inner_payload~load_msg_addr();
            cell domain = inner_payload~load_ref();
            slice duck_jetton_wallet_address = inner_payload~load_msg_addr();
            cell base_content = inner_payload~load_ref();

            smc_jetton_balance += msg_jetton_amount;

            cell content = begin_cell().store_uint(0, 8).store_dict(new_dict()).end_cell();

            int seconds = now() - auction_start_time;
            int months = seconds / one_month;
            if (months > 12) {
                months = 12;
            }
            int duration = auction_start_duration - (auction_start_duration - auction_end_duration) * months / 12;

            int auction_end_time = now() + duration;
            store_data(index, collection_address, zero_address(), content, domain, pack_auction(from_user_address, msg_jetton_amount, auction_end_time), now(), duck_jetton_wallet_address, smc_jetton_balance, base_content);
            return ();
        }

        if (init? & equal_slices(collection_address, from_address)) { ;; if already inited
            slice from_user_address = inner_payload~load_msg_addr();
            send_simple_jetton(from_user_address, msg_jetton_amount, jetton_transfer_comission(), 0, duck_jetton_wallet_address, cur_lt(), 1);
            return ();
        }

        ;; users jettons after that, not dns minter

        ;; check jetton
        throw_unless(503, equal_slices(duck_jetton_wallet_address, sender_address));

        int inner_op_code = inner_payload~load_uint(32);
        (slice max_bid_address, int max_bid_amount, int auction_end_time) = unpack_auction(auction);

        int auction_complete = now() > auction_end_time;

        if (inner_op_code == 1) {
            throw_unless(455, ~ auction_complete);
            throw_unless(466, msg_value >= jetton_transfer_comission()); ;; to send back jettons to previous max_bid_address
            throw_unless(407, msg_jetton_amount >= muldiv(max_bid_amount, 105, 100)); ;; 5% greater then previous bid

            send_simple_jetton(max_bid_address, max_bid_amount, jetton_transfer_comission(), 0, duck_jetton_wallet_address, cur_lt(), 1); ;; send back jettons to previous max_bid_address
            smc_jetton_balance -= max_bid_amount;

            ;; update auction info
            smc_jetton_balance += msg_jetton_amount;
            max_bid_amount = msg_jetton_amount;
            max_bid_address = from_address;
            int delta_time = auction_prolongation - (auction_end_time - now()); ;; extending to auction_prolongation
            if (delta_time > 0) {
                auction_end_time += delta_time;
            }
            store_data(index, collection_address, owner_address, content, domain, pack_auction(max_bid_address, max_bid_amount, auction_end_time), now(), duck_jetton_wallet_address, smc_jetton_balance, base_content);
            return ();
        }

        if (inner_op_code == op::dns_balance_release) { ;; release domain
            throw_unless(414, (now() - last_fill_up_time > one_year) & (cell_null?(auction)));
            int min_price = get_min_price(domain.begin_parse().slice_bits(), now());
            throw_unless(407, msg_jetton_amount >= min_price);

            int balance_without_msg = my_balance - msg_value;
            int amount_to_send = balance_without_msg - min_tons_for_storage(); ;; return all tons, that user spent for comissions
            if (amount_to_send > 0) {
                send_simple_message(owner_address, amount_to_send, op::dns_balance_release, query_id, null(), 2); ;; ignore errors
            }

            ;; start auction agian!
            smc_jetton_balance += msg_jetton_amount;
            max_bid_amount = msg_jetton_amount;
            max_bid_address = from_address;
            auction_end_time = now() + auction_start_duration; ;; always 1 week
            owner_address = zero_address();
            auction = pack_auction(max_bid_address, max_bid_amount, auction_end_time);
            store_data(index, collection_address, owner_address, content, domain, auction, now(), duck_jetton_wallet_address, smc_jetton_balance, base_content);
            return ();
        }

        return ();
    }   


    (int init?, int index, slice collection_address, slice owner_address, cell content, cell domain, cell auction, int last_fill_up_time, slice duck_jetton_wallet_address, int smc_jetton_balance, cell base_content) = load_data();
    (slice max_bid_address, int max_bid_amount, int auction_end_time) = unpack_auction(auction);

    int auction_complete = now() > auction_end_time;

    int query_id = in_msg_body~load_uint(64);

    if (op_code == 0) {
        throw_unless(406, equal_slices(sender_address, owner_address) & auction_complete); ;; only owner can fill-up balance, prevent coins lost right after the auction
        store_data(index, collection_address, owner_address, content, domain, auction, now(), duck_jetton_wallet_address, smc_jetton_balance, base_content);
        return ();
    }

    if ((auction_complete) & (~ cell_null?(auction))) { ;; take domain after auction
        send_simple_jetton(collection_address, max_bid_amount, jetton_transfer_comission(), 0, duck_jetton_wallet_address, query_id, 1);
        send_simple_message(collection_address, my_balance - min_tons_for_storage(), 0, now(), null(), 1);
        smc_jetton_balance -= max_bid_amount;
        owner_address = max_bid_address;
        auction = null();
        store_data(index, collection_address, owner_address, content, domain, auction, last_fill_up_time, duck_jetton_wallet_address, smc_jetton_balance, base_content);
    }

    if (op_code == op::transfer()) {
        throw_unless(401, equal_slices(sender_address, owner_address));
        transfer_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, domain, auction, duck_jetton_wallet_address, smc_jetton_balance, base_content);
        return ();
    }
    if (op_code == op::edit_content()) { ;; owner can change content and dns records
        throw_unless(410, equal_slices(sender_address, owner_address));
        store_data(index, collection_address, owner_address, in_msg_body~load_ref(), domain, auction, now(), duck_jetton_wallet_address, smc_jetton_balance, base_content);
        return ();
    }
    if (op_code == op::change_dns_record) { ;; change dns record
        throw_unless(411, equal_slices(sender_address, owner_address));
        int key = in_msg_body~load_uint(256);
        int has_value = in_msg_body.slice_refs() > 0;

        slice cs = content.begin_parse();
        throw_unless(412, cs~load_uint(8) == 0); ;; data onchain tag
        cell keyvalue_map = cs~load_dict();

        if (has_value) {
            cell value = in_msg_body~load_ref();

            keyvalue_map~udict_set_ref(256, key, value);
        } else {
            keyvalue_map~udict_delete?(256, key);
        }

        content = begin_cell().store_uint(0, 8).store_dict(keyvalue_map).end_cell();

        store_data(index, collection_address, owner_address, content, domain, auction, now(), duck_jetton_wallet_address, smc_jetton_balance, base_content);
        return ();
    }

    if (op_code == 0xab5fc32) { ;; change dns item code
        throw_unless(403, equal_slices(sender_address, owner_address));
        cell new_code = in_msg_body~load_ref();
        set_code(new_code);
        return ();
    }

    if (op_code == op::get_static_data()) {
        send_simple_message(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64); ;; carry all the remaining value of the inbound message
        return ();
    }

    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
    (int init?, int index, slice collection_address, slice owner_address, _, _, _, _, _, _, cell base_content) = load_data();
    return (init?, index, collection_address, owner_address, base_content);
}

slice get_editor() method_id {
    (_, _, _, slice owner_address, _, _, _, _, _, _, _) = load_data();
    return owner_address;
}

slice get_domain() method_id {
    (_, _, _, _, _, cell domain, _, _, _, _, _) = load_data();
    return domain.begin_parse();
}

(slice, int, int) get_auction_info() method_id {
    (_, _, _, _, _, _, cell auction, _, _, _, _) = load_data();
    return unpack_auction(auction);
}

int get_last_fill_up_time() method_id {
    (_, _, _, _, _, _, _, int last_fill_up_time, _, _, _) = load_data();
    return last_fill_up_time;
}

(slice, int) get_additional_jetton_info() method_id {
    (_, _, _, _, _, _, _, _, slice duck_jetton_wallet_address, int smc_duck_balance, _) = load_data();
    return (duck_jetton_wallet_address, smc_duck_balance);
}

(int, cell) dnsresolve(slice subdomain, int category) method_id {
    int subdomain_bits = slice_bits(subdomain);

    throw_unless(70, mod(subdomain_bits, 8) == 0);

    (_, _, _, _, cell content, _, _, _, _, _, _) = load_data();

    slice cs = content.begin_parse();
    throw_unless(412, cs~load_uint(8) == 0); ;; data onchain tag
    cell keyvalue_map = cs~load_dict();

    int starts_with_zero_byte = subdomain.preload_int(8) == 0;
    throw_unless(413, starts_with_zero_byte);

    if (subdomain_bits > 8) { ;; more than "." requested
        category = "dns_next_resolver"H;
    }

    if (category == 0) { ;;  all categories are requested
        return (8, keyvalue_map);
    }

    (cell value, int found) = keyvalue_map.udict_get_ref?(256, category);
    return (8, value);
}